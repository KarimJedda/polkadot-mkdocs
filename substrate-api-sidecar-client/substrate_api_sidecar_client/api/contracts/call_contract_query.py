from http import HTTPStatus
from typing import Any, Optional, Union

import httpx

from ... import errors
from ...client import AuthenticatedClient, Client
from ...models.contract_metadata import ContractMetadata
from ...models.contracts_ink_query import ContractsInkQuery
from ...models.error import Error
from ...types import UNSET, Response, Unset


def _get_kwargs(
    address: str,
    *,
    body: ContractMetadata,
    method: Union[Unset, str] = "get",
    gas_limit: Union[Unset, float] = -1.0,
    storage_deposit_limit: Union[Unset, float] = UNSET,
    args: Union[Unset, list[str]] = UNSET,
) -> dict[str, Any]:
    headers: dict[str, Any] = {}

    params: dict[str, Any] = {}

    params["method"] = method

    params["gasLimit"] = gas_limit

    params["storageDepositLimit"] = storage_deposit_limit

    json_args: Union[Unset, list[str]] = UNSET
    if not isinstance(args, Unset):
        json_args = args

    params["args"] = json_args

    params = {k: v for k, v in params.items() if v is not UNSET and v is not None}

    _kwargs: dict[str, Any] = {
        "method": "post",
        "url": f"/contracts/ink/{address}/query",
        "params": params,
    }

    _body = body.to_dict()

    _kwargs["json"] = _body
    headers["Content-Type"] = "application/json"

    _kwargs["headers"] = headers
    return _kwargs


def _parse_response(
    *, client: Union[AuthenticatedClient, Client], response: httpx.Response
) -> Optional[Union[ContractsInkQuery, Error]]:
    if response.status_code == 200:
        response_200 = ContractsInkQuery.from_dict(response.json())

        return response_200
    if response.status_code == 400:
        response_400 = Error.from_dict(response.json())

        return response_400
    if client.raise_on_unexpected_status:
        raise errors.UnexpectedStatus(response.status_code, response.content)
    else:
        return None


def _build_response(
    *, client: Union[AuthenticatedClient, Client], response: httpx.Response
) -> Response[Union[ContractsInkQuery, Error]]:
    return Response(
        status_code=HTTPStatus(response.status_code),
        content=response.content,
        headers=response.headers,
        parsed=_parse_response(client=client, response=response),
    )


def sync_detailed(
    address: str,
    *,
    client: Union[AuthenticatedClient, Client],
    body: ContractMetadata,
    method: Union[Unset, str] = "get",
    gas_limit: Union[Unset, float] = -1.0,
    storage_deposit_limit: Union[Unset, float] = UNSET,
    args: Union[Unset, list[str]] = UNSET,
) -> Response[Union[ContractsInkQuery, Error]]:
    """Query an !Ink contract with a given message (method).

     Will return a valid or invalid result.

    Args:
        address (str):
        method (Union[Unset, str]):  Default: 'get'.
        gas_limit (Union[Unset, float]):  Default: -1.0.
        storage_deposit_limit (Union[Unset, float]):
        args (Union[Unset, list[str]]): An array of Abi params.
        body (ContractMetadata): Metadata used to instantiate a ContractPromise. This metadata can
            be generated by compiling the contract you are querying.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ContractsInkQuery, Error]]
    """

    kwargs = _get_kwargs(
        address=address,
        body=body,
        method=method,
        gas_limit=gas_limit,
        storage_deposit_limit=storage_deposit_limit,
        args=args,
    )

    response = client.get_httpx_client().request(
        **kwargs,
    )

    return _build_response(client=client, response=response)


def sync(
    address: str,
    *,
    client: Union[AuthenticatedClient, Client],
    body: ContractMetadata,
    method: Union[Unset, str] = "get",
    gas_limit: Union[Unset, float] = -1.0,
    storage_deposit_limit: Union[Unset, float] = UNSET,
    args: Union[Unset, list[str]] = UNSET,
) -> Optional[Union[ContractsInkQuery, Error]]:
    """Query an !Ink contract with a given message (method).

     Will return a valid or invalid result.

    Args:
        address (str):
        method (Union[Unset, str]):  Default: 'get'.
        gas_limit (Union[Unset, float]):  Default: -1.0.
        storage_deposit_limit (Union[Unset, float]):
        args (Union[Unset, list[str]]): An array of Abi params.
        body (ContractMetadata): Metadata used to instantiate a ContractPromise. This metadata can
            be generated by compiling the contract you are querying.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ContractsInkQuery, Error]
    """

    return sync_detailed(
        address=address,
        client=client,
        body=body,
        method=method,
        gas_limit=gas_limit,
        storage_deposit_limit=storage_deposit_limit,
        args=args,
    ).parsed


async def asyncio_detailed(
    address: str,
    *,
    client: Union[AuthenticatedClient, Client],
    body: ContractMetadata,
    method: Union[Unset, str] = "get",
    gas_limit: Union[Unset, float] = -1.0,
    storage_deposit_limit: Union[Unset, float] = UNSET,
    args: Union[Unset, list[str]] = UNSET,
) -> Response[Union[ContractsInkQuery, Error]]:
    """Query an !Ink contract with a given message (method).

     Will return a valid or invalid result.

    Args:
        address (str):
        method (Union[Unset, str]):  Default: 'get'.
        gas_limit (Union[Unset, float]):  Default: -1.0.
        storage_deposit_limit (Union[Unset, float]):
        args (Union[Unset, list[str]]): An array of Abi params.
        body (ContractMetadata): Metadata used to instantiate a ContractPromise. This metadata can
            be generated by compiling the contract you are querying.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[ContractsInkQuery, Error]]
    """

    kwargs = _get_kwargs(
        address=address,
        body=body,
        method=method,
        gas_limit=gas_limit,
        storage_deposit_limit=storage_deposit_limit,
        args=args,
    )

    response = await client.get_async_httpx_client().request(**kwargs)

    return _build_response(client=client, response=response)


async def asyncio(
    address: str,
    *,
    client: Union[AuthenticatedClient, Client],
    body: ContractMetadata,
    method: Union[Unset, str] = "get",
    gas_limit: Union[Unset, float] = -1.0,
    storage_deposit_limit: Union[Unset, float] = UNSET,
    args: Union[Unset, list[str]] = UNSET,
) -> Optional[Union[ContractsInkQuery, Error]]:
    """Query an !Ink contract with a given message (method).

     Will return a valid or invalid result.

    Args:
        address (str):
        method (Union[Unset, str]):  Default: 'get'.
        gas_limit (Union[Unset, float]):  Default: -1.0.
        storage_deposit_limit (Union[Unset, float]):
        args (Union[Unset, list[str]]): An array of Abi params.
        body (ContractMetadata): Metadata used to instantiate a ContractPromise. This metadata can
            be generated by compiling the contract you are querying.

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[ContractsInkQuery, Error]
    """

    return (
        await asyncio_detailed(
            address=address,
            client=client,
            body=body,
            method=method,
            gas_limit=gas_limit,
            storage_deposit_limit=storage_deposit_limit,
            args=args,
        )
    ).parsed
